# Generated by Django 4.2 on 2024-10-17 19:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nazwa', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nazwa')),
                ('uczestnicy', models.JSONField(default=users.models.Chat.dict_list, verbose_name='Uczęstnicy')),
                ('ikona', models.ImageField(blank=True, default='default/default_chat.png', null=True, upload_to='media/chat_icons', verbose_name='Ikonka')),
                ('wiadomosci', models.JSONField(default=users.models.Chat.dict_list, verbose_name='Wiadomości')),
            ],
            options={
                'verbose_name': 'Czat',
                'verbose_name_plural': 'Czaty',
                'db_table': 'users.Chat',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('imie', models.CharField(max_length=20, null=True, verbose_name='Imię')),
                ('nazwisko', models.CharField(max_length=30, null=True, verbose_name='Nazwisko')),
                ('awatar', models.ImageField(blank=True, default='default/default_avatar.png', null=True, upload_to='media/user_avatars', verbose_name='Avatar')),
                ('klasa', models.IntegerField(null=True, verbose_name='Klasa')),
                ('kierunek', models.CharField(max_length=2, null=True, verbose_name='Kierunek')),
                ('grupa', models.IntegerField(null=True, verbose_name='Grupa')),
                ('czaty', models.JSONField(default=users.models.User.dict_list, verbose_name='Czaty')),
                ('ostatni_czat', models.IntegerField(null=True, verbose_name='Ostatni czat')),
                ('zapyty_o_dodaniu_w_przyjaciele', models.JSONField(blank=True, default=users.models.User.zapyty_dict, null=True, verbose_name='Zapyty o dodaniu w przyjaciele')),
                ('przyjaciele', models.JSONField(default=users.models.User.dict_list, verbose_name='Przyjaciele')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Użytkownik',
                'verbose_name_plural': 'Użytkownicy',
                'db_table': 'users.User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
